extends ../main.pug

block content
  h1 Arrp Syntax

  p.
    A formal grammar is given below in the EBNF notation,
    as #[a(href='https://www.w3.org/TR/REC-xml/#sec-notation') defined by W3C].
  p.
    In addition:
  ul
    li "[ text ]" is equivalent to "( text )?"
    li "{ text }" is equivalent to "( text )*"
  p.
    Rules are separated by empty lines.
  p.
    Any number of spaces, tab characters and line breaks
    are allowed before or after any symbol or literal, except in the rules
    for the symbols "id", "int", and "real".

  h2 Formal Grammar

  pre.
    program = [ module-decl ] [ imports ] [ bindings ]

    module-decl = "module" id ";"

    imports = { import-decl }

    import-decl = "import" id [ "as" id ] ";"

    bindings = binding { ";" binding }  [ ";" ]

    binding = id [ "(" [ param-list ] ")" ] "=" expr

    param-list = id { "," id }

    expr =
        id
        |
        qualified-id
        |
        int
        |
        real
        |
        boolean
        |
        unary-op expr
        |
        expr binary-op expr
        |
        conditional
        |
        lambda
        |
        func-application
        |
        array-func
        |
        array-enum
        |
        array-application
        |
        array-recursion
        |
        array-size
        |
        "(" expr ")"
        |
        let-expr
        |
        where-expr
        |
        id "=" expr

    id = [a-zA-Z] [a-zA-Z_0-9]*

    int = [0-9]+

    real = [0-9]+ "." [0-9]+

    qualified-id = id "." id

    boolean = "true" | "false"

    unary-op = "!" | "-"

    binary-op =
        "||" | "&&" | "==" | "!=" | "<" | "<=" | ">" | ">=" |
        "+" | "-" | "*" | "/" | "//" | "%" | "^"

    conditional = "if" expr "then" expr "else" expr

    lambda =
        "\" param-list "->" expr

    func-application = expr "(" expr-list ")"

    array-func = "[" [ array-ranges ":" ] array-patterns "]"

    array-ranges = array-range { "," array-range }

    array-range = expr | "~"

    array-patterns = array-pattern { ";" array-pattern } [ ";" ]

    array-pattern =
        array-pattern-vars "->" expr
        |
        array-pattern-vars array-domains

    array-pattern-vars = array-pattern-var { "," array-pattern-var }

    array-pattern-var = id | int

    array-domains = { array-domain } "|" expr

    array-domain = "|" expr "->" expr

    array-enum = "[" array-enum-elem { ";" array-enum-elem }  "]"

    array-enum-elem = expr

    array-application = array-app-object "[" expr-list "]"

    array-app-object = expr | "this"

    array-size = "#" array-size-object [ "@" array-size-dim ]

    array-size-object = expr

    array-size-dim = expr

    let-expr =
        "let" binding "in" expr
        |
        "let" "{" bindings "}" "in" expr

    where-expr =
        expr "where" binding
        |
        expr "where" "{" bindings "}"

    expr-list = expr { "," expr }

